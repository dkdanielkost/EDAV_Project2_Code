dis_mat = as.dist(mat)
dis_graph = hclust(mat, method="complete")
plot(dis_graph)
mat = matrix(c(0, 0.3, 0.4, 0.7, 0.3, 0, 0.5, 0.8, 0.4, 0.5, 0.0, 0.45, 0.7, 0.8, 0.45, 0.0), nrow=4)
dis_mat = as.dist(mat)
dis_graph = hclust(mat, method="complete")
dis_graph = hclust(dis_mat, method="complete")
plot(dis_graph)
mtext("test")
mtext("test",line = 0)
mtext("test",line = 10)
mtext("test",line = 3)
mtext("test",line = -3)
?mtext
mtext("test",at = c (1,1))
mtext("test",at = c (2,1))
mtext("test",at = c (2,0))
mtext("test",at = c (3,0))
mtext("test",at = c (3,2))
mtext("test",at = c (3,1))
mtext("test",at = c (3,-1))
mtext("test",at = c (3,-2))
mtext("test",at = c (3,-4))
mtext("test",at = c (3,0))
mtext("test",at = c (4,0))
mtext("test",at = c (4,1))
mtext("test",at = c (4,-1))
mtext("test",at = c (4,0.5))
mtext("test",at = c (3))
plot(dis_graph)
plot(x1,x2)
obs = c(1,2,3,4,5,6)
x1 = c(1,1,0,5,6,4)
x2 = c(4,3,4,1,2,0)
plot(x1,x2)
set.seed(1)
lan = sample(2, nrow(x1))
print(lab)
set.seed(1)
lab = sample(2, nrow(x1))
print(lab)
lab = sample(2, nrow(x1))
lab = sample(2, length(x1))
print(lab)
lab = sample(2, length(x1))
lab = sample(2, length(x1), replace = TRUE)
print(lab)
obs = c(1,2,3,4,5,6)
x1 = c(1,1,0,5,6,4)
x2 = c(4,3,4,1,2,0)
plot(x1,x2)
```
Part B
```{r}
set.seed(1)
lab = sample(2, length(x1), replace = TRUE)
print(lab)
lab == 0
plot(x1,x2, labels = lab)
plot(x1,x2, col = lab)
set.seed(1)
lab = sample(2, length(x1), replace = TRUE)
print(lab)
plot(x1,x2, col = lab)
cent1 = mean(x1[lab == 1] +x2[lab == 1])
cent2 = mean(x1[lab == 0] +x2[lab == 0])
cent1
cent2
x1
x2
cent2 = mean(x1[lab == 0] +x2[lab == 0])
cent1
cent2
cent2 = mean(x1[lab == 2] +x2[lab == 2])
cent2
cent1 = mean(x1[lab == 1] +x2[lab == 1])
cent2 = mean(x1[lab == 2] +x2[lab == 2])
cent1
cent2
cent1 = c(mean(x1[lab == 1,1]  x2[lab == 1,1]), mean(x1[lab == 1,2]  x2[lab == 1,2]))
cent1 = c(mean(x1[lab == 1,1] + x2[lab == 1,1]), mean(x1[lab == 1,2]+x2[lab == 1,2]))
x1[lab == 1,1]
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1,2]))
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1,2]))
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1]))
cent1
cent2 = c(mean(x1[lab == 2]), mean(x2[lab == 2]))
cent2
plot(x1,x2, col = lab)
points(cent1[1],cent1[2],pch = "20")
points(cent1[1],cent1[2],pch = "19")
plot(x1,x2, col = lab)
points(cent1[1],cent1[2],pch = "19")
points(cent2[1],cent2[2],pch = "20")
points(cent2[1],cent2[2],pch = "20", col=lab[2])
points(cent2[1],cent2[2],pch = "20", col="red")
lab
lab
x1
x2
lab(3) = 1
lab(5) = 2
lab[3] = 1
lab[5] = 2
cent1 = c(mean(x1[lab == 1]), mean(x2[lab == 1]))
cent2 = c(mean(x1[lab == 2]), mean(x2[lab == 2]))
plot(x1,x2, col = lab)
points(cent1[1],cent1[2],pch = "19")
points(cent2[1],cent2[2],pch = "20", col="red")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("dygraphs")
install.packages("xts")
install.packages("openxlsx")
install.packages("gridExtra")
install.packages("knitr")
library(rgbif)
df = readRDS("GlobalFloodsRecord.rds")
df$Displaced = as.numeric(df$Displaced)
df$Dead = as.numeric(df$Dead)
df$Country = as.factor(df$Country)
setwd("/Users/bobminnich/Documents/Columbia/Courses/DataVisualization/Homework2/EDAV_Project2_Code")
df = readRDS("GlobalFloodsRecord.rds")
df$Displaced = as.numeric(df$Displaced)
df$Dead = as.numeric(df$Dead)
df$Country = as.factor(df$Country)
ele = df[,c("Centroid.X","Centriod.Y")]
ele = df[ ,c("Centroid.X","Centriod.Y")]
colnames(df)
df[ ,c("Centroid.X","Centriod.Y")]
df[ ,c("Centroid.X")]
df[ ,c("Centroid.Y")]
df[ ,c("Centroid.X","Centriod.Y")]
ele = data.frame(rbind(df$Centroid.X, df$Centroid.Y))
colnames(ele) = c("decimalLatitude", "decimalLongitude")
View(ele)
ele = data.frame(t(rbind(df$Centroid.X, df$Centroid.Y)))
colnames(ele) = c("decimalLatitude", "decimalLongitude")
df$Centroid.X = as.numeric(df$Centroid.X)
df$Centroid.Y = as.numeric(df$Centroid.Y)
ele = data.frame(t(rbind(df$Centroid.X, df$Centroid.Y)))
colnames(ele) = c("decimalLatitude", "decimalLongitude")
setwd("/Users/bobminnich/Documents/Columbia/Courses/DataVisualization/Homework2/EDAV_Project2_Code")
df = readRDS("GlobalFloodsRecord.rds")
df$Displaced = as.numeric(df$Displaced)
df$Dead = as.numeric(df$Dead)
df$Country = as.factor(df$Country)
df$Centroid.X = as.numeric(df$Centroid.X)
df$Centroid.Y = as.numeric(df$Centroid.Y)
ele = data.frame(t(rbind(df$Centroid.X, df$Centroid.Y)))
colnames(ele) = c("decimalLatitude", "decimalLongitude")
df = readRDS("GlobalFloodsRecord.rds")
str(df$Centroid.X)
str(unlist(as.numeric(df$Centroid.X)))
str(unlist((df$Centroid.X)))
as.numeric(as.character(df$Centroid.X))
df$Centroid.X = as.numeric(as.character(df$Centroid.X))
df$Centroid.Y = as.numeric(as.character(df$Centroid.Y))
ele = data.frame(t(rbind(df$Centroid.X, df$Centroid.Y)))
colnames(ele) = c("decimalLatitude", "decimalLongitude")
bobkey = "AIzaSyD-8g3l-VX8TyUUI2wHUyLGBrWYQaBj-vs"
test = elevation(ele, ele$decimalLatitude, ele$decimalLongitude, bobkey)
ele = data.frame(t(rbind(df$Centroid.X, df$Centroid.Y)))
colnames(ele) = c("decimalLongitude","decimalLatitude")
test = elevation(ele, ele$decimalLatitude, ele$decimalLongitude, bobkey)
test = elevation(ele, ele$decimalLatitude, ele$decimalLongitude, key = bobkey)
View(test)
saveRDS(test,"elevation.RDS")
newdf = rbind(df,test)
dim(test)
dim(df)
newdf = cbind(df,test)
colnames(test)
colnames(df)
ggplot(newdf, aes(x=Displaced, y=elevation)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
library(ggplot2)
ggplot(newdf, aes(x=Displaced, y=elevation)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
min(newdf$elevation)
df$Displaced = as.numeric(df$Displaced)
df$Dead = as.numeric(df$Dead)
df$Country = as.factor(df$Country)
newdf = cbind(df,test)
ggplot(newdf, aes(x=Displaced, y=elevation)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
newdf = cbind(df,test)
filt = filter(newdf, elevation>0)
ggplot(filt, aes(x=Displaced, y=elevation)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
filt = filter(newdf, elevation>0)
colnames(newdf)
str(newdf$elevation)
newdf$elevation > 0
filt = filter(newdf, (elevation > 0))
filt = filter(newdf, (elevation > 0))
filt = filter(newdf, elevation == 0)
str(newdf$elevation)
filt = filter(newdf, elevation == 0)
newdf = cbind(df,test)
filt = filter(newdf, elevation == 0)
filt = elevation > 0
filt = df$elevation > 0
filt = newdf$elevation > 0
filt
filtered = newdf[filt,]
ggplot(filtered, aes(x=Displaced, y=elevation)) +
geom_point(shape=1) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=Displaced, y=elevation)) +
geom_point() +    # Use hollow circles
geom_smooth(method=lm)            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point() +    # Use hollow circles
geom_smooth(method=lm)            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = 1/10) +    # Use hollow circles
geom_smooth(method=lm)            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
geom_smooth(method=lm)
ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)
ggplot(filtered, aes(x=elevation, y=Severity..)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)
ggplot(filtered, aes(x=elevation, y=Affected.sq.km)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)
str(df$Affe)
df$Magnitude..M... = as.numeric(as.character(df$Magnitude..M...))
df$Affected.sq.km = as.numeric(as.character(df$Affected.sq.km))
newdf = cbind(df,test)
filt = newdf$elevation > 0
filtered = newdf[filt,]
ggplot(filtered, aes(x=elevation, y=Affected.sq.km)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)
ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)
ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()
ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Magnitude")
ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Magnitude")+
xlab("Elevation")
ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Dead")+
xlab("Elevation")
ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Magnitude")+
xlab("Displaced")            # Add a loess smoothed fit curve with confidence region
ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Displaced")+
xlab("Elevation")            # Add a loess smoothed fit curve with confidence region
MainTitle = "test"
a = ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Displaced")+
xlab("Elevation")            # Add a loess smoothed fit curve with confidence region
b = ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Dead")+
xlab("Elevation")
c = ggplot(filtered, aes(x=elevation, y=Affected.sq.km)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Affected Square km")+
xlab("Elevation")
d = ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Magnitude")+
xlab("Elevation")
MainTitle = "test"
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.5, 5), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:3))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
library(grid)
library(gridExtra)
MainTitle = "test"
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.5, 5), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:3))
pushViewport(viewport(layout = grid.layout(2, 2, heights = unit(c(0.5, 5), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:3))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
MainTitle = "test"
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.5, 5), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 3, layout.pos.col = 2),newpage=FALSE)
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.5, 1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 3, layout.pos.col = 2),newpage=FALSE)
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.25, 1,1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 3, layout.pos.col = 2),newpage=FALSE)
dev.off()
MainTitle = "Plots of Variables vs Elevation"
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.25, 1,1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 3, layout.pos.col = 2),newpage=FALSE)
filt = newdf$elevation > 4000
high = newdf[filt,]
View(high)
f = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
f
df$Duration.in.Days = as.numeric(as.character(df$Duration.in.Days))
newdf = cbind(df,test)
f = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
filt = newdf$elevation > 0
filtered = newdf[filt,]
f = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
f
filter(df,Duration.in.Days > 400)
filter(df,"Duration.in.Days" > 400)
example = filter(df,"Duration.in.Days" > 400)
example = data.frame(example)
View(example)
df[521,]
library(wordcloud)
library(dplyr)
words = df$Notes.and.Comments..may.include.quoted.headlines.from.copyrighted.news.stories..for.internal.research.purposes.only.
words = df$Notes.and.Comments..may.include.quoted.headlines.from.copyrighted.news.stories..for.internal.research.purposes.only.
splitting = strsplit(words,". ")
str(words)
words = as.character(words)
wors
words
splitting = strsplit(words,". ")
dim(splitting)
splitting2 = unist(splitting)
splitting2 = unlist(splitting)
length(splitting)
length(splitting2)
word_count <- summarise(splitting2,count = n())
grop_by.descriptor <- group_by(splitting2)
splitting3 = data.frame(splitting2)
splitting3$count = 1
colnames(splitting3)
grop_by.descriptor <- group_by(splitting3,splitting2)
word_count <- summarise(grop_by.descriptor,count = n())
View(word_count)
max(word_count$count)
word_count_filt = filter(word_count, count >500)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$splitting2, min.freq = 20)
library(tm)
stopWords <- stopwords("en")
a = c("a", "b", "c")
"c" %in% a
"c" !%in% a
"c" %!in% a
stopwordindex = word_count %in% stopWords
stopwordindex = splitting2 %in% stopWords
length(stopwordindex)
stopwordindex[1:10]
!stopwordindex[1:10]
splitting_filter = splitting2[!stopwordindex]
length(splitting_filter)
splitting3 = data.frame(splitting2)
splitting3$count = 1
grop_by.descriptor <- group_by(splitting3,splitting2)
word_count <- summarise(grop_by.descriptor,count = n())
word_count_filt = filter(word_count, count >500)
set.seed(1)
#words  = as.character(word_count$Descriptor)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$splitting2, min.freq = 20)
words[1:10]
word_count_filt = filter(word_count, count >200)
set.seed(1)
#words  = as.character(word_count$Descriptor)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$splitting2, min.freq = 20)
splitting_regex = str_replace_all(splitting, "[^[:alnum:]]", " ")
install.packages("stringr")
install.packages("stringr")
library(stringr)
splitting_regex = str_replace_all(splitting2, "[^[:alnum:]]", " ")
stopwordindex = splitting_regex %in% stopWords
splitting_filter = splitting_regex[!stopwordindex]
length_v = vector(length = length(splitting_filter))
for(i in (splitting_filter)){
if(length(i)>3){
length_v[count] = TRUE
}else{
length_v[count] = FALSE
}
count = count + 1
}
count = 1
for(i in (splitting_filter)){
if(length(i)>3){
length_v[count] = TRUE
}else{
length_v[count] = FALSE
}
count = count + 1
}
splitting3 = data.frame(splitting_filter[length_v])
length_v[1:10]
splitting_filter[1]
length(splitting_filter[1])
nchar(splitting_filter[1])
count = 1
for(i in (splitting_filter)){
if(nchar(i)>3){
length_v[count] = TRUE
}else{
length_v[count] = FALSE
}
count = count + 1
}
splitting3 = data.frame(splitting_filter[length_v])
splitting3$count = 1
grop_by.descriptor <- group_by(splitting3,splitting2)
word_count <- summarise(grop_by.descriptor,count = n())
word_count_filt = filter(word_count, count >200)
set.seed(1)
#words  = as.character(word_count$Descriptor)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$splitting2, min.freq = 20)
library(dplyr)
library(wordcloud)
grop_by.descriptor <- group_by(splitting3,splitting2)
word_count <- summarise(grop_by.descriptor,count = n())
word_count_filt = filter(word_count, count >200)
set.seed(1)
#words  = as.character(word_count$Descriptor)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$splitting2, min.freq = 20)
colnames(splitting3)
grop_by.descriptor <- group_by(splitting_filter.length_v.,count)
colnames(splitting3) = c("Word","Count")
grop_by.descriptor <- group_by(splitting3,Word)
word_count <- summarise(grop_by.descriptor,count = n())
View(word_count)
word_count_filt = filter(word_count, count >200)
set.seed(1)
#words  = as.character(word_count$Descriptor)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$splitting2, min.freq = 20)
colnames(word_count_filt)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$Word, min.freq = 20)
write.table(word_count, "word_count.csv")
getwd()
?wordcloud
word_count_filt = filter(word_count, count >100)
set.seed(1)
#words  = as.character(word_count$Descriptor)
wordcloud(freq = word_count_filt$count,word =  word_count_filt$Word, min.freq = 20)
View(df)
?RNetCDF
library(RNetCDF)
