ggtitle("Number of Flood Events")+
ylab("Numer of Total Flood Events")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries")
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 3, heights = unit(c(0.25, 2,2,2), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries for:")
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 3, heights = unit(c(0.1, 1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
top = 10
displaced_count = df[,c("Country", "Displaced")]%>%
group_by(Country) %>%
summarize(Displaced = sum(Displaced))
displaced_order = order(displaced_count$Displaced,decreasing  = TRUE)
top10_dis = displaced_count[displaced_order[1:top],]
death_toll = df[,c("Country", "Dead")]%>%
group_by(Country) %>%
summarize(Dead = sum(Dead))
death_order = order(death_toll$Dead,decreasing  = TRUE)
top10_death = death_toll[death_order[1:top],]
flood_count = df[,c("Country", "Register..")]%>%
group_by(Country) %>%
summarize(count = n())
flood_count_order = order(flood_count$count,decreasing  = TRUE)
top10_flood = flood_count[flood_count_order[1:20],]
# colors <- brewer.pal(10, "Spectral")
#
# #Find colors associtated with labels and apply the color palet
# for(i in 1:10){
#   top10_flood$color[i] = colors[i]
#   top10_death$color[i] = colors[i]
# }
c = ggplot(top10_dis, aes(x = factor(Country), y = Displaced)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Displaced")+
ylab("Number of Displaced")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
b = ggplot(top10_death, aes(x = factor(Country), y = Dead)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Deaths")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
a  = ggplot(top10_flood, aes(x = factor(Country), y = count)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Flood Events")+
ylab("Numer of Total Flood Events")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries for:")
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 3, heights = unit(c(0.1, 1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
top = 10
displaced_count = df[,c("Country", "Displaced")]%>%
group_by(Country) %>%
summarize(Displaced = sum(Displaced))
displaced_order = order(displaced_count$Displaced,decreasing  = TRUE)
top10_dis = displaced_count[displaced_order[1:top],]
death_toll = df[,c("Country", "Dead")]%>%
group_by(Country) %>%
summarize(Dead = sum(Dead))
death_order = order(death_toll$Dead,decreasing  = TRUE)
top10_death = death_toll[death_order[1:top],]
flood_count = df[,c("Country", "Register..")]%>%
group_by(Country) %>%
summarize(count = n())
flood_count_order = order(flood_count$count,decreasing  = TRUE)
top10_flood = flood_count[flood_count_order[1:20],]
c = ggplot(top10_dis, aes(x = factor(Country), y = Displaced)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Displaced")+
ylab("Number of Displaced")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
b = ggplot(top10_death, aes(x = factor(Country), y = Dead)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Deaths")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
a  = ggplot(top10_flood, aes(x = factor(Country), y = count)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Flood Events")+
ylab("Numer of Total Flood Events")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries for:")
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 3, heights = unit(c(0.1, 1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
top = 10
displaced_count = df[,c("Country", "Displaced")]%>%
group_by(Country) %>%
summarize(Displaced = sum(Displaced))
displaced_order = order(displaced_count$Displaced,decreasing  = TRUE)
top10_dis = displaced_count[displaced_order[1:top],]
death_toll = df[,c("Country", "Dead")]%>%
group_by(Country) %>%
summarize(Dead = sum(Dead))
death_order = order(death_toll$Dead,decreasing  = TRUE)
top10_death = death_toll[death_order[1:top],]
flood_count = df[,c("Country", "Register..")]%>%
group_by(Country) %>%
summarize(count = n())
flood_count_order = order(flood_count$count,decreasing  = TRUE)
top10_flood = flood_count[flood_count_order[1:top],]
c = ggplot(top10_dis, aes(x = factor(Country), y = Displaced)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Displaced")+
ylab("Number of Displaced")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
b = ggplot(top10_death, aes(x = factor(Country), y = Dead)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Deaths")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
a  = ggplot(top10_flood, aes(x = factor(Country), y = count)) +
geom_bar(stat = "identity")+
#coord_flip()+
ggtitle("Number of Flood Events")+
ylab("Numer of Total Flood Events")+
xlab("Country")+ theme(legend.position="none")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))+
theme(axis.title.y = element_blank())
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries for:")
grid.newpage()
pushViewport(viewport(layout = grid.layout(2, 3, heights = unit(c(0.1, 1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 2, layout.pos.col = 3),newpage=FALSE)
test = filter(df,Country == "Iran")
sum(test$Dead)
sum(test$Displaced)
pie <- ggplot(df, aes(x = factor(1), fill = factor(Country))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
flood_count = df[,c("Country", "Displaced")]%>%
group_by(Country) %>%
summarize(Displaced = n())
flood_count
flood_count = df[,c("Country", "Displaced")]%>%
group_by(Country) %>%
summarize(count = n())
displaced_order = order(flood_count$count,decreasing  = TRUE)
top30 = displaced_count[displaced_order[1:top],]
top30
top30 = displaced_count[displaced_order[1:30],]
flood_count = df[,c("Country", "Displaced")]%>%
group_by(Country) %>%
summarize(count = n())
displaced_order = order(flood_count$count,decreasing  = TRUE)
top30 = displaced_count[displaced_order[1:30],]
pie <- ggplot(df, aes(x = count, fill = factor(Country))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
pie <- ggplot(df, aes(x = factor(1), fill = factor(count))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
pie <- ggplot(df, aes(x = factor(1), fill = factor(Country))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
pie <- ggplot(top30, aes(x = factor(1), fill = factor(Country))) +
geom_bar(width = 1)
pie + coord_polar(theta = "y")
flood_count = df[,c("Country", "Displaced")]%>%
group_by(Country)
flood_count
test = filter(df,Country == "Iran")
test = filter(df,Country == "Pakistan")
sum(test$Displaced)
sum(test$Dead)
test = filter(df,Country == "Afghanistan")
sum(test$Dead)
sum(test$Displaced)
test = filter(df,Country == "Bangladesh")
sum(test$Displaced)
sum(test$Dead)
filtered = filter(df, elevation>0)
a = ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25,colour="#F8766D", fill="#F8766D") +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Displaced")+
xlab("Elevation")            # Add a loess smoothed fit curve with confidence region
b = ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Dead")+
xlab("Elevation")
c = ggplot(filtered, aes(x=elevation, y=Affected.sq.km)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Affected Square km")+
xlab("Elevation")
d = ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Magnitude")+
xlab("Elevation")
MainTitle = "Plots of Variables vs Elevation"
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.25, 1,1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 3, layout.pos.col = 2),newpage=FALSE)
filtered = filter(df, elevation>0)
a = ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25,colour="#F8766D", fill="#F8766D") +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Displaced")+
xlab("Elevation")            # Add a loess smoothed fit curve with confidence region
b = ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Dead")+
xlab("Elevation")
c = ggplot(filtered, aes(x=elevation, y=Affected.sq.km)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Affected Square km")+
xlab("Elevation")
d = ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Magnitude")+
xlab("Elevation")
filtered = filter(df, elevation>0)
a = ggplot(filtered, aes(x=elevation, y=Displaced)) +
geom_point(alpha = .25,colour="#F8766D", fill="#F8766D") +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Displaced")+
xlab("Elevation")            # Add a loess smoothed fit curve with confidence region
b = ggplot(filtered, aes(x=elevation, y=Dead)) +
geom_point(alpha = .25,colour="#F8766D", fill="#F8766D") +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Dead")+
xlab("Elevation")
c = ggplot(filtered, aes(x=elevation, y=Affected.sq.km)) +
geom_point(alpha = .25,colour="#F8766D", fill="#F8766D") +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Affected Square km")+
xlab("Elevation")
d = ggplot(filtered, aes(x=elevation, y=Magnitude..M...)) +
geom_point(alpha = .25,colour="#F8766D", fill="#F8766D") +    # Use hollow circles
geom_smooth(method=lm)+
ylab("Magnitude")+
xlab("Elevation")
MainTitle = "Plots of Variables vs Elevation"
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.25, 1,1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1),newpage=FALSE)
print(d, vp = viewport(layout.pos.row = 3, layout.pos.col = 2),newpage=FALSE)
a = ggplot(filtered, aes(elevation)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)
a
#Split between northen and southern
southern = df$latitude < 0
df$hem[southern] = "S"
df$hem[!southern] = "N"
filtered = filter(df, elevation>0)
a = ggplot(filtered, aes(elevation)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)
f = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
a
b
f
a = ggplot(filtered, aes(Duration.in.Days)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)
a
a = ggplot(filtered, aes(Duration.in.Days)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)+
xlim(0,100)
a
a = ggplot(filtered, aes(Duration.in.Days)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)+
xlim(0,100) +   theme(legend.title=element_blank())
a
a = ggplot(filtered, aes(elevation)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)
a
f = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
f
f = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
f
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .25) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")+
ylim(0,100)
c
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")+
ylim(0,100)
c
which.max(df$elevation)
newdf = df[-which.max(df$elevation),]
newdf = filtered[-which.max(df$elevation),]
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
newdf = filtered[-which.max(df$elevation),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
c
d
newdf = filtered[-which.max(df$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
d
newdf = filtered[-which.max(df$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
d
which.max(df$Duration.in.Days)
newdf = filtered[-which.max(filtered$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth()+
ylab("Duration.in.Days")+
xlab("Elevation")
d
newdf = filtered[-which.max(filtered$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation")
d
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation")
newdf = filtered[-which.max(filtered$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation")
c
d
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation") + ylim(0,100)
newdf = filtered[-which.max(filtered$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation")+ ylim(0,100)
c
d
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation") + ylim(0,100)
newdf = filtered[-which.max(filtered$Duration.in.Days),]
d = ggplot(newdf, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation")+ ylim(0,100)
c
d
which.max(filtered$Duration.in.Days)
print(df[which.max(df$Duration.in.Days),c("Country", "Notes.and.Comments..may.include.quoted.headlines.from.copyrighted.news.stories..for.internal.research.purposes.only.")
print(df[which.max(df$Duration.in.Days),c("Country", "Notes.and.Comments..may.include.quoted.headlines.from.copyrighted.news.stories..for.internal.research.purposes.only."))
print(df[which.max(df$Duration.in.Days),c("Country", "Notes.and.Comments..may.include.quoted.headlines.from.copyrighted.news.stories..for.internal.research.purposes.only.")])
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration.in.Days")+
xlab("Elevation")
c
print(df[which.max(df$Duration.in.Days),c("Country", "Duration.in.Days")])
test = df[-which.max(df$Duration.in.Days),]
test[which.max(df$Duration.in.Days),]
test[which.max(df$Duration.in.Days),"Duration.in.Days"]
test[which.max(test$Duration.in.Days),"Duration.in.Days"]
duration = df[which.max(df$Duration.in.Days),c("Country", "Duration.in.Days")]
duration
test = df[-which.max(df$Duration.in.Days),]
test[which.max(test$Duration.in.Days),c("Country", "Duration.in.Days")]
test
a = ggplot(filtered, aes(elevation)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)
b = ggplot(filtered, aes(Duration.in.Days)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)+
xlim(0,100) +   theme(legend.title=element_blank())
bia.a
a
b
a
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries for:")
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.1, 1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1:2),newpage=FALSE)
#dev.off()
#dev.new()
MainTitle = paste("Top", top, "Countries for:")
grid.newpage()
pushViewport(viewport(layout = grid.layout(3, 2, heights = unit(c(0.1, 1,1), "null"))))
grid.text(MainTitle, vp = viewport(layout.pos.row = 1, layout.pos.col = 1:2, just = "center"))
print(a, vp = viewport(layout.pos.row = 2, layout.pos.col = 1),newpage=FALSE)
print(b, vp = viewport(layout.pos.row = 2, layout.pos.col = 2),newpage=FALSE)
print(c, vp = viewport(layout.pos.row = 3, layout.pos.col = 1:2),newpage=FALSE)
#Split between northen and southern
southern = df$latitude < 0
df$hem[southern] = "S"
df$hem[!southern] = "N"
filtered = filter(df, elevation>0)
a = ggplot(filtered, aes(elevation)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)+
theme(legend.position="none")+
ylab("Density")+
xlab("Elevation ")+
b = ggplot(filtered, aes(Duration.in.Days)) +
geom_density(aes(group=hem, colour=hem, fill=hem),alpha=0.3)+
xlim(0,100) +   theme(legend.title=element_blank())
xlab("Duration in Days")+
theme(axis.title.y = element_blank())
c = ggplot(filtered, aes(x=elevation, y=Duration.in.Days)) +
geom_point(aes(group=hem, colour=hem, fill=hem),alpha = .4) +    # Use hollow circles
geom_smooth(method = "lm")+
ylab("Duration in Days")+
xlab("Elevation")
duration = df[which.max(df$Duration.in.Days),c("Country", "Duration.in.Days")]
test = df[-which.max(df$Duration.in.Days),]
duration2 = test[which.max(test$Duration.in.Days),c("Country", "Duration.in.Days")]
